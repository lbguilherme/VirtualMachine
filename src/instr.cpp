// This file is generated by instructions.rb. Do not edit here.

#include <string>
#include <stdexcept>
#include <iostream>

#include <vm.hpp>

void VirtualMachine::runInstruction()
{
    uint16_t opcode = toNative(mem<uint16_t>(toNative(eip)));
    eip = fromNative(toNative(eip) + 2);
    switch (opcode)
    {
        case 0:       // nop()
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnopl        ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _nop32();
            break;
        }
        case 1:       // mov(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov8(arg1, arg2);
            break;
        }
        case 2:       // mov(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov8(arg1, arg2);
            break;
        }
        case 3:       // mov(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov8(arg1, arg2);
            break;
        }
        case 4:       // mov(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov8(arg1, arg2);
            break;
        }
        case 5:       // mov(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov8(arg1, arg2);
            break;
        }
        case 6:       // mov(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov8(arg1, arg2);
            break;
        }
        case 7:       // mov(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov16(arg1, arg2);
            break;
        }
        case 8:       // mov(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov16(arg1, arg2);
            break;
        }
        case 9:       // mov(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov16(arg1, arg2);
            break;
        }
        case 10:      // mov(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov16(arg1, arg2);
            break;
        }
        case 11:      // mov(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov16(arg1, arg2);
            break;
        }
        case 12:      // mov(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov16(arg1, arg2);
            break;
        }
        case 13:      // mov(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov32(arg1, arg2);
            break;
        }
        case 14:      // mov(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov32(arg1, arg2);
            break;
        }
        case 15:      // mov(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov32(arg1, arg2);
            break;
        }
        case 16:      // mov(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov32(arg1, arg2);
            break;
        }
        case 17:      // mov(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov32(arg1, arg2);
            break;
        }
        case 18:      // mov(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mov32(arg1, arg2);
            break;
        }
        case 19:      // movsb(imm8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovsbw      ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsb16(arg1, arg2);
            break;
        }
        case 20:      // movsb(reg8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovsbw      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsb16(arg1, arg2);
            break;
        }
        case 21:      // movsb(mem8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovsbw      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsb16(arg1, arg2);
            break;
        }
        case 22:      // movsb(imm8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovsbl      ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsb32(arg1, arg2);
            break;
        }
        case 23:      // movsb(reg8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovsbl      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsb32(arg1, arg2);
            break;
        }
        case 24:      // movsb(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovsbl      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsb32(arg1, arg2);
            break;
        }
        case 25:      // movsw(imm16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovswl      ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsw32(arg1, arg2);
            break;
        }
        case 26:      // movsw(reg16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovswl      ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsw32(arg1, arg2);
            break;
        }
        case 27:      // movsw(mem16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovswl      ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movsw32(arg1, arg2);
            break;
        }
        case 28:      // movzb(imm8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzbw      ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzb16(arg1, arg2);
            break;
        }
        case 29:      // movzb(reg8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzbw      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzb16(arg1, arg2);
            break;
        }
        case 30:      // movzb(mem8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzbw      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzb16(arg1, arg2);
            break;
        }
        case 31:      // movzb(imm8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzbl      ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzb32(arg1, arg2);
            break;
        }
        case 32:      // movzb(reg8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzbl      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzb32(arg1, arg2);
            break;
        }
        case 33:      // movzb(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzbl      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzb32(arg1, arg2);
            break;
        }
        case 34:      // movzw(imm16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzwl      ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzw32(arg1, arg2);
            break;
        }
        case 35:      // movzw(reg16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzwl      ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzw32(arg1, arg2);
            break;
        }
        case 36:      // movzw(mem16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tmovzwl      ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movzw32(arg1, arg2);
            break;
        }
        case 37:      // push(imm8)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushb       ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push8(arg1);
            break;
        }
        case 38:      // push(reg8)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push8(arg1);
            break;
        }
        case 39:      // push(mem8)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push8(arg1);
            break;
        }
        case 40:      // push(imm16)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushw       ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push16(arg1);
            break;
        }
        case 41:      // push(reg16)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push16(arg1);
            break;
        }
        case 42:      // push(mem16)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push16(arg1);
            break;
        }
        case 43:      // push(imm32)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushl       ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push32(arg1);
            break;
        }
        case 44:      // push(reg32)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushl       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push32(arg1);
            break;
        }
        case 45:      // push(mem32)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpushl       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _push32(arg1);
            break;
        }
        case 46:      // pop(reg8)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpopb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _pop8(arg1);
            break;
        }
        case 47:      // pop(mem8)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpopb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _pop8(arg1);
            break;
        }
        case 48:      // pop(reg16)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpopw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _pop16(arg1);
            break;
        }
        case 49:      // pop(mem16)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpopw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _pop16(arg1);
            break;
        }
        case 50:      // pop(reg32)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpopl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _pop32(arg1);
            break;
        }
        case 51:      // pop(mem32)
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tpopl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _pop32(arg1);
            break;
        }
        case 52:      // add(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add8(arg1, arg2);
            break;
        }
        case 53:      // add(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add8(arg1, arg2);
            break;
        }
        case 54:      // add(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add8(arg1, arg2);
            break;
        }
        case 55:      // add(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add8(arg1, arg2);
            break;
        }
        case 56:      // add(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add8(arg1, arg2);
            break;
        }
        case 57:      // add(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add8(arg1, arg2);
            break;
        }
        case 58:      // add(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add16(arg1, arg2);
            break;
        }
        case 59:      // add(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add16(arg1, arg2);
            break;
        }
        case 60:      // add(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add16(arg1, arg2);
            break;
        }
        case 61:      // add(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add16(arg1, arg2);
            break;
        }
        case 62:      // add(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add16(arg1, arg2);
            break;
        }
        case 63:      // add(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add16(arg1, arg2);
            break;
        }
        case 64:      // add(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add32(arg1, arg2);
            break;
        }
        case 65:      // add(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add32(arg1, arg2);
            break;
        }
        case 66:      // add(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add32(arg1, arg2);
            break;
        }
        case 67:      // add(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add32(arg1, arg2);
            break;
        }
        case 68:      // add(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add32(arg1, arg2);
            break;
        }
        case 69:      // add(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\taddl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _add32(arg1, arg2);
            break;
        }
        case 70:      // adc(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc8(arg1, arg2);
            break;
        }
        case 71:      // adc(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc8(arg1, arg2);
            break;
        }
        case 72:      // adc(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc8(arg1, arg2);
            break;
        }
        case 73:      // adc(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc8(arg1, arg2);
            break;
        }
        case 74:      // adc(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc8(arg1, arg2);
            break;
        }
        case 75:      // adc(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc8(arg1, arg2);
            break;
        }
        case 76:      // adc(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc16(arg1, arg2);
            break;
        }
        case 77:      // adc(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc16(arg1, arg2);
            break;
        }
        case 78:      // adc(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc16(arg1, arg2);
            break;
        }
        case 79:      // adc(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc16(arg1, arg2);
            break;
        }
        case 80:      // adc(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc16(arg1, arg2);
            break;
        }
        case 81:      // adc(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc16(arg1, arg2);
            break;
        }
        case 82:      // adc(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc32(arg1, arg2);
            break;
        }
        case 83:      // adc(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc32(arg1, arg2);
            break;
        }
        case 84:      // adc(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc32(arg1, arg2);
            break;
        }
        case 85:      // adc(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc32(arg1, arg2);
            break;
        }
        case 86:      // adc(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc32(arg1, arg2);
            break;
        }
        case 87:      // adc(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tadcl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _adc32(arg1, arg2);
            break;
        }
        case 88:      // and(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and8(arg1, arg2);
            break;
        }
        case 89:      // and(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and8(arg1, arg2);
            break;
        }
        case 90:      // and(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and8(arg1, arg2);
            break;
        }
        case 91:      // and(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and8(arg1, arg2);
            break;
        }
        case 92:      // and(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and8(arg1, arg2);
            break;
        }
        case 93:      // and(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and8(arg1, arg2);
            break;
        }
        case 94:      // and(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and16(arg1, arg2);
            break;
        }
        case 95:      // and(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and16(arg1, arg2);
            break;
        }
        case 96:      // and(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and16(arg1, arg2);
            break;
        }
        case 97:      // and(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and16(arg1, arg2);
            break;
        }
        case 98:      // and(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and16(arg1, arg2);
            break;
        }
        case 99:      // and(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and16(arg1, arg2);
            break;
        }
        case 100:     // and(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and32(arg1, arg2);
            break;
        }
        case 101:     // and(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and32(arg1, arg2);
            break;
        }
        case 102:     // and(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and32(arg1, arg2);
            break;
        }
        case 103:     // and(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and32(arg1, arg2);
            break;
        }
        case 104:     // and(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and32(arg1, arg2);
            break;
        }
        case 105:     // and(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tandl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _and32(arg1, arg2);
            break;
        }
        case 106:     // sub(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub8(arg1, arg2);
            break;
        }
        case 107:     // sub(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub8(arg1, arg2);
            break;
        }
        case 108:     // sub(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub8(arg1, arg2);
            break;
        }
        case 109:     // sub(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub8(arg1, arg2);
            break;
        }
        case 110:     // sub(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub8(arg1, arg2);
            break;
        }
        case 111:     // sub(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub8(arg1, arg2);
            break;
        }
        case 112:     // sub(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub16(arg1, arg2);
            break;
        }
        case 113:     // sub(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub16(arg1, arg2);
            break;
        }
        case 114:     // sub(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub16(arg1, arg2);
            break;
        }
        case 115:     // sub(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub16(arg1, arg2);
            break;
        }
        case 116:     // sub(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub16(arg1, arg2);
            break;
        }
        case 117:     // sub(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub16(arg1, arg2);
            break;
        }
        case 118:     // sub(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub32(arg1, arg2);
            break;
        }
        case 119:     // sub(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub32(arg1, arg2);
            break;
        }
        case 120:     // sub(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub32(arg1, arg2);
            break;
        }
        case 121:     // sub(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub32(arg1, arg2);
            break;
        }
        case 122:     // sub(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub32(arg1, arg2);
            break;
        }
        case 123:     // sub(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsubl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sub32(arg1, arg2);
            break;
        }
        case 124:     // sbb(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb8(arg1, arg2);
            break;
        }
        case 125:     // sbb(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb8(arg1, arg2);
            break;
        }
        case 126:     // sbb(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb8(arg1, arg2);
            break;
        }
        case 127:     // sbb(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb8(arg1, arg2);
            break;
        }
        case 128:     // sbb(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb8(arg1, arg2);
            break;
        }
        case 129:     // sbb(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb8(arg1, arg2);
            break;
        }
        case 130:     // sbb(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb16(arg1, arg2);
            break;
        }
        case 131:     // sbb(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb16(arg1, arg2);
            break;
        }
        case 132:     // sbb(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb16(arg1, arg2);
            break;
        }
        case 133:     // sbb(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb16(arg1, arg2);
            break;
        }
        case 134:     // sbb(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb16(arg1, arg2);
            break;
        }
        case 135:     // sbb(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb16(arg1, arg2);
            break;
        }
        case 136:     // sbb(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb32(arg1, arg2);
            break;
        }
        case 137:     // sbb(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb32(arg1, arg2);
            break;
        }
        case 138:     // sbb(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb32(arg1, arg2);
            break;
        }
        case 139:     // sbb(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb32(arg1, arg2);
            break;
        }
        case 140:     // sbb(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb32(arg1, arg2);
            break;
        }
        case 141:     // sbb(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsbbl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sbb32(arg1, arg2);
            break;
        }
        case 142:     // xor(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor8(arg1, arg2);
            break;
        }
        case 143:     // xor(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor8(arg1, arg2);
            break;
        }
        case 144:     // xor(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor8(arg1, arg2);
            break;
        }
        case 145:     // xor(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor8(arg1, arg2);
            break;
        }
        case 146:     // xor(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor8(arg1, arg2);
            break;
        }
        case 147:     // xor(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor8(arg1, arg2);
            break;
        }
        case 148:     // xor(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor16(arg1, arg2);
            break;
        }
        case 149:     // xor(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor16(arg1, arg2);
            break;
        }
        case 150:     // xor(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor16(arg1, arg2);
            break;
        }
        case 151:     // xor(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor16(arg1, arg2);
            break;
        }
        case 152:     // xor(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor16(arg1, arg2);
            break;
        }
        case 153:     // xor(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor16(arg1, arg2);
            break;
        }
        case 154:     // xor(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor32(arg1, arg2);
            break;
        }
        case 155:     // xor(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor32(arg1, arg2);
            break;
        }
        case 156:     // xor(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor32(arg1, arg2);
            break;
        }
        case 157:     // xor(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor32(arg1, arg2);
            break;
        }
        case 158:     // xor(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor32(arg1, arg2);
            break;
        }
        case 159:     // xor(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\txorl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _xor32(arg1, arg2);
            break;
        }
        case 160:     // or(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torb         ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or8(arg1, arg2);
            break;
        }
        case 161:     // or(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torb         ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or8(arg1, arg2);
            break;
        }
        case 162:     // or(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torb         ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or8(arg1, arg2);
            break;
        }
        case 163:     // or(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torb         ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or8(arg1, arg2);
            break;
        }
        case 164:     // or(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torb         ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or8(arg1, arg2);
            break;
        }
        case 165:     // or(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torb         ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or8(arg1, arg2);
            break;
        }
        case 166:     // or(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torw         ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or16(arg1, arg2);
            break;
        }
        case 167:     // or(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torw         ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or16(arg1, arg2);
            break;
        }
        case 168:     // or(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torw         ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or16(arg1, arg2);
            break;
        }
        case 169:     // or(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torw         ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or16(arg1, arg2);
            break;
        }
        case 170:     // or(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torw         ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or16(arg1, arg2);
            break;
        }
        case 171:     // or(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torw         ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or16(arg1, arg2);
            break;
        }
        case 172:     // or(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torl         ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or32(arg1, arg2);
            break;
        }
        case 173:     // or(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torl         ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or32(arg1, arg2);
            break;
        }
        case 174:     // or(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torl         ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or32(arg1, arg2);
            break;
        }
        case 175:     // or(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torl         ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or32(arg1, arg2);
            break;
        }
        case 176:     // or(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torl         ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or32(arg1, arg2);
            break;
        }
        case 177:     // or(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\torl         ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _or32(arg1, arg2);
            break;
        }
        case 178:     // not(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnotb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _not8(arg1);
            break;
        }
        case 179:     // not(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnotb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _not8(arg1);
            break;
        }
        case 180:     // not(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnotw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _not16(arg1);
            break;
        }
        case 181:     // not(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnotw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _not16(arg1);
            break;
        }
        case 182:     // not(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnotl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _not32(arg1);
            break;
        }
        case 183:     // not(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnotl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _not32(arg1);
            break;
        }
        case 184:     // neg(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnegb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _neg8(arg1);
            break;
        }
        case 185:     // neg(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnegb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _neg8(arg1);
            break;
        }
        case 186:     // neg(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnegw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _neg16(arg1);
            break;
        }
        case 187:     // neg(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnegw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _neg16(arg1);
            break;
        }
        case 188:     // neg(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnegl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _neg32(arg1);
            break;
        }
        case 189:     // neg(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tnegl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _neg32(arg1);
            break;
        }
        case 190:     // inc(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tincb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _inc8(arg1);
            break;
        }
        case 191:     // inc(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tincb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _inc8(arg1);
            break;
        }
        case 192:     // inc(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tincw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _inc16(arg1);
            break;
        }
        case 193:     // inc(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tincw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _inc16(arg1);
            break;
        }
        case 194:     // inc(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tincl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _inc32(arg1);
            break;
        }
        case 195:     // inc(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tincl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _inc32(arg1);
            break;
        }
        case 196:     // dec(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tdecb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _dec8(arg1);
            break;
        }
        case 197:     // dec(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tdecb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _dec8(arg1);
            break;
        }
        case 198:     // dec(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tdecw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _dec16(arg1);
            break;
        }
        case 199:     // dec(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tdecw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _dec16(arg1);
            break;
        }
        case 200:     // dec(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tdecl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _dec32(arg1);
            break;
        }
        case 201:     // dec(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tdecl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _dec32(arg1);
            break;
        }
        case 202:     // call(reg32)
        {
            clocks += 50;
#ifndef NDEBUG
            std::clog << "\tcalll       ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _call32(arg1);
            break;
        }
        case 203:     // call(mem32)
        {
            clocks += 50;
#ifndef NDEBUG
            std::clog << "\tcalll       ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _call32(arg1);
            break;
        }
        case 204:     // leave()
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tleavel      ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _leave32();
            break;
        }
        case 205:     // ret()
        {
            clocks += 50;
#ifndef NDEBUG
            std::clog << "\tretl        ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _ret32();
            break;
        }
        case 206:     // int(imm32)
        {
            clocks += 100;
#ifndef NDEBUG
            std::clog << "\tintl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _int32(arg1);
            break;
        }
        case 207:     // cmp(imm8, imm8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg2 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 208:     // cmp(reg8, imm8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg2 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 209:     // cmp(mem8, imm8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg2 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 210:     // cmp(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 211:     // cmp(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 212:     // cmp(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 213:     // cmp(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 214:     // cmp(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 215:     // cmp(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp8(arg1, arg2);
            break;
        }
        case 216:     // cmp(imm16, imm16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg2 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 217:     // cmp(reg16, imm16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg2 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 218:     // cmp(mem16, imm16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg2 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 219:     // cmp(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 220:     // cmp(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 221:     // cmp(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 222:     // cmp(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 223:     // cmp(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 224:     // cmp(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp16(arg1, arg2);
            break;
        }
        case 225:     // cmp(imm32, imm32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg2 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 226:     // cmp(reg32, imm32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg2 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 227:     // cmp(mem32, imm32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg2 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 228:     // cmp(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 229:     // cmp(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 230:     // cmp(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 231:     // cmp(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 232:     // cmp(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 233:     // cmp(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tcmpl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cmp32(arg1, arg2);
            break;
        }
        case 234:     // test(imm8, imm8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg2 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 235:     // test(reg8, imm8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg2 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 236:     // test(mem8, imm8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg2 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 237:     // test(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 238:     // test(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 239:     // test(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 240:     // test(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 241:     // test(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 242:     // test(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test8(arg1, arg2);
            break;
        }
        case 243:     // test(imm16, imm16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg2 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 244:     // test(reg16, imm16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg2 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 245:     // test(mem16, imm16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg2 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 246:     // test(imm16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 247:     // test(reg16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 248:     // test(mem16, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 249:     // test(imm16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 250:     // test(reg16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 251:     // test(mem16, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test16(arg1, arg2);
            break;
        }
        case 252:     // test(imm32, imm32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg2 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 253:     // test(reg32, imm32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg2 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 254:     // test(mem32, imm32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg2 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 255:     // test(imm32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 256:     // test(reg32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 257:     // test(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 258:     // test(imm32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 259:     // test(reg32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 260:     // test(mem32, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\ttestl       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _test32(arg1, arg2);
            break;
        }
        case 261:     // jmp(reg32)
        {
            clocks += 20;
#ifndef NDEBUG
            std::clog << "\tjmpl        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jmp32(arg1);
            break;
        }
        case 262:     // jmp(mem32)
        {
            clocks += 20;
#ifndef NDEBUG
            std::clog << "\tjmpl        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jmp32(arg1);
            break;
        }
        case 263:     // jo(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjol         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_O(), arg1);
            break;
        }
        case 264:     // jno(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnol        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NO(), arg1);
            break;
        }
        case 265:     // jb(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjbl         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_B(), arg1);
            break;
        }
        case 266:     // jnae(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnael       ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NAE(), arg1);
            break;
        }
        case 267:     // jnb(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnbl        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NB(), arg1);
            break;
        }
        case 268:     // jae(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjael        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_AE(), arg1);
            break;
        }
        case 269:     // je(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjel         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_E(), arg1);
            break;
        }
        case 270:     // jz(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjzl         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_Z(), arg1);
            break;
        }
        case 271:     // jne(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnel        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NE(), arg1);
            break;
        }
        case 272:     // jnz(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnzl        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NZ(), arg1);
            break;
        }
        case 273:     // jbe(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjbel        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_BE(), arg1);
            break;
        }
        case 274:     // jna(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnal        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NA(), arg1);
            break;
        }
        case 275:     // jnbe(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnbel       ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NBE(), arg1);
            break;
        }
        case 276:     // ja(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjal         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_A(), arg1);
            break;
        }
        case 277:     // js(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjsl         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_S(), arg1);
            break;
        }
        case 278:     // jns(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnsl        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NS(), arg1);
            break;
        }
        case 279:     // jp(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjpl         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_P(), arg1);
            break;
        }
        case 280:     // jpe(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjpel        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_PE(), arg1);
            break;
        }
        case 281:     // jnp(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnpl        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NP(), arg1);
            break;
        }
        case 282:     // jpo(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjpol        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_PO(), arg1);
            break;
        }
        case 283:     // jl(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjll         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_L(), arg1);
            break;
        }
        case 284:     // jnge(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjngel       ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NGE(), arg1);
            break;
        }
        case 285:     // jnl(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnll        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NL(), arg1);
            break;
        }
        case 286:     // jge(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjgel        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_GE(), arg1);
            break;
        }
        case 287:     // jle(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjlel        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_LE(), arg1);
            break;
        }
        case 288:     // jng(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjngl        ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NG(), arg1);
            break;
        }
        case 289:     // jnle(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnlel       ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NLE(), arg1);
            break;
        }
        case 290:     // jg(reg32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjgl         ";
#endif
            uint32_t arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_G(), arg1);
            break;
        }
        case 291:     // jo(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjol         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_O(), arg1);
            break;
        }
        case 292:     // jno(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnol        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NO(), arg1);
            break;
        }
        case 293:     // jb(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjbl         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_B(), arg1);
            break;
        }
        case 294:     // jnae(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnael       ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NAE(), arg1);
            break;
        }
        case 295:     // jnb(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnbl        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NB(), arg1);
            break;
        }
        case 296:     // jae(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjael        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_AE(), arg1);
            break;
        }
        case 297:     // je(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjel         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_E(), arg1);
            break;
        }
        case 298:     // jz(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjzl         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_Z(), arg1);
            break;
        }
        case 299:     // jne(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnel        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NE(), arg1);
            break;
        }
        case 300:     // jnz(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnzl        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NZ(), arg1);
            break;
        }
        case 301:     // jbe(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjbel        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_BE(), arg1);
            break;
        }
        case 302:     // jna(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnal        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NA(), arg1);
            break;
        }
        case 303:     // jnbe(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnbel       ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NBE(), arg1);
            break;
        }
        case 304:     // ja(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjal         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_A(), arg1);
            break;
        }
        case 305:     // js(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjsl         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_S(), arg1);
            break;
        }
        case 306:     // jns(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnsl        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NS(), arg1);
            break;
        }
        case 307:     // jp(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjpl         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_P(), arg1);
            break;
        }
        case 308:     // jpe(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjpel        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_PE(), arg1);
            break;
        }
        case 309:     // jnp(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnpl        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NP(), arg1);
            break;
        }
        case 310:     // jpo(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjpol        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_PO(), arg1);
            break;
        }
        case 311:     // jl(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjll         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_L(), arg1);
            break;
        }
        case 312:     // jnge(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjngel       ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NGE(), arg1);
            break;
        }
        case 313:     // jnl(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnll        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NL(), arg1);
            break;
        }
        case 314:     // jge(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjgel        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_GE(), arg1);
            break;
        }
        case 315:     // jle(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjlel        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_LE(), arg1);
            break;
        }
        case 316:     // jng(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjngl        ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NG(), arg1);
            break;
        }
        case 317:     // jnle(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjnlel       ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_NLE(), arg1);
            break;
        }
        case 318:     // jg(mem32)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tjgl         ";
#endif
            uint32_t arg1 = (char*)&readMemory<uint32_t>() - (char*)memory;
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _jcc32(_G(), arg1);
            break;
        }
        case 319:     // seto(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetob       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_O(), arg1);
            break;
        }
        case 320:     // setno(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnob      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NO(), arg1);
            break;
        }
        case 321:     // setb(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetbb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_B(), arg1);
            break;
        }
        case 322:     // setnae(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnaeb     ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NAE(), arg1);
            break;
        }
        case 323:     // setnb(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnbb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NB(), arg1);
            break;
        }
        case 324:     // setae(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetaeb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_AE(), arg1);
            break;
        }
        case 325:     // sete(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tseteb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_E(), arg1);
            break;
        }
        case 326:     // setz(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetzb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_Z(), arg1);
            break;
        }
        case 327:     // setne(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetneb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NE(), arg1);
            break;
        }
        case 328:     // setnz(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnzb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NZ(), arg1);
            break;
        }
        case 329:     // setbe(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetbeb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_BE(), arg1);
            break;
        }
        case 330:     // setna(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnab      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NA(), arg1);
            break;
        }
        case 331:     // setnbe(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnbeb     ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NBE(), arg1);
            break;
        }
        case 332:     // seta(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetab       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_A(), arg1);
            break;
        }
        case 333:     // sets(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetsb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_S(), arg1);
            break;
        }
        case 334:     // setns(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnsb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NS(), arg1);
            break;
        }
        case 335:     // setp(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetpb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_P(), arg1);
            break;
        }
        case 336:     // setpe(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetpeb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_PE(), arg1);
            break;
        }
        case 337:     // setnp(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnpb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NP(), arg1);
            break;
        }
        case 338:     // setpo(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetpob      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_PO(), arg1);
            break;
        }
        case 339:     // setl(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetlb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_L(), arg1);
            break;
        }
        case 340:     // setnge(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetngeb     ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NGE(), arg1);
            break;
        }
        case 341:     // setnl(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnlb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NL(), arg1);
            break;
        }
        case 342:     // setge(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetgeb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_GE(), arg1);
            break;
        }
        case 343:     // setle(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetleb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_LE(), arg1);
            break;
        }
        case 344:     // setng(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetngb      ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NG(), arg1);
            break;
        }
        case 345:     // setnle(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnleb     ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NLE(), arg1);
            break;
        }
        case 346:     // setg(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetgb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_G(), arg1);
            break;
        }
        case 347:     // seto(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetob       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_O(), arg1);
            break;
        }
        case 348:     // setno(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnob      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NO(), arg1);
            break;
        }
        case 349:     // setb(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetbb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_B(), arg1);
            break;
        }
        case 350:     // setnae(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnaeb     ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NAE(), arg1);
            break;
        }
        case 351:     // setnb(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnbb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NB(), arg1);
            break;
        }
        case 352:     // setae(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetaeb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_AE(), arg1);
            break;
        }
        case 353:     // sete(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tseteb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_E(), arg1);
            break;
        }
        case 354:     // setz(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetzb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_Z(), arg1);
            break;
        }
        case 355:     // setne(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetneb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NE(), arg1);
            break;
        }
        case 356:     // setnz(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnzb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NZ(), arg1);
            break;
        }
        case 357:     // setbe(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetbeb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_BE(), arg1);
            break;
        }
        case 358:     // setna(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnab      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NA(), arg1);
            break;
        }
        case 359:     // setnbe(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnbeb     ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NBE(), arg1);
            break;
        }
        case 360:     // seta(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetab       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_A(), arg1);
            break;
        }
        case 361:     // sets(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetsb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_S(), arg1);
            break;
        }
        case 362:     // setns(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnsb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NS(), arg1);
            break;
        }
        case 363:     // setp(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetpb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_P(), arg1);
            break;
        }
        case 364:     // setpe(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetpeb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_PE(), arg1);
            break;
        }
        case 365:     // setnp(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnpb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NP(), arg1);
            break;
        }
        case 366:     // setpo(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetpob      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_PO(), arg1);
            break;
        }
        case 367:     // setl(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetlb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_L(), arg1);
            break;
        }
        case 368:     // setnge(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetngeb     ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NGE(), arg1);
            break;
        }
        case 369:     // setnl(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnlb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NL(), arg1);
            break;
        }
        case 370:     // setge(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetgeb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_GE(), arg1);
            break;
        }
        case 371:     // setle(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetleb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_LE(), arg1);
            break;
        }
        case 372:     // setng(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetngb      ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NG(), arg1);
            break;
        }
        case 373:     // setnle(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetnleb     ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_NLE(), arg1);
            break;
        }
        case 374:     // setg(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tsetgb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _setcc8(_G(), arg1);
            break;
        }
        case 375:     // lea(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tleab        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _lea8(arg1, arg2);
            break;
        }
        case 376:     // lea(mem16, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tleaw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _lea16(arg1, arg2);
            break;
        }
        case 377:     // lea(mem32, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tleal        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _lea32(arg1, arg2);
            break;
        }
        case 378:     // mul(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tmulb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mul8(arg1);
            break;
        }
        case 379:     // mul(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tmulb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mul8(arg1);
            break;
        }
        case 380:     // mul(reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tmulw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mul16(arg1);
            break;
        }
        case 381:     // mul(mem16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tmulw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mul16(arg1);
            break;
        }
        case 382:     // mul(reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tmull        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mul32(arg1);
            break;
        }
        case 383:     // mul(mem32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tmull        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _mul32(arg1);
            break;
        }
        case 384:     // imul(reg8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\timulb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul8(arg1);
            break;
        }
        case 385:     // imul(mem8)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\timulb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul8(arg1);
            break;
        }
        case 386:     // imul(reg8, reg8)
        {
            clocks += 6;
#ifndef NDEBUG
            std::clog << "\timulb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul8(arg1, arg2);
            break;
        }
        case 387:     // imul(mem8, reg8)
        {
            clocks += 6;
#ifndef NDEBUG
            std::clog << "\timulb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul8(arg1, arg2);
            break;
        }
        case 388:     // imul(reg8, reg8, imm8)
        {
            clocks += 8;
#ifndef NDEBUG
            std::clog << "\timulb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg3 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul8(arg1, arg2, arg3);
            break;
        }
        case 389:     // imul(mem8, reg8, imm8)
        {
            clocks += 8;
#ifndef NDEBUG
            std::clog << "\timulb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t arg3 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul8(arg1, arg2, arg3);
            break;
        }
        case 390:     // imul(reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\timulw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul16(arg1);
            break;
        }
        case 391:     // imul(mem16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\timulw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul16(arg1);
            break;
        }
        case 392:     // imul(reg16, reg16)
        {
            clocks += 6;
#ifndef NDEBUG
            std::clog << "\timulw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul16(arg1, arg2);
            break;
        }
        case 393:     // imul(mem16, reg16)
        {
            clocks += 6;
#ifndef NDEBUG
            std::clog << "\timulw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul16(arg1, arg2);
            break;
        }
        case 394:     // imul(reg16, reg16, imm16)
        {
            clocks += 8;
#ifndef NDEBUG
            std::clog << "\timulw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg3 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul16(arg1, arg2, arg3);
            break;
        }
        case 395:     // imul(mem16, reg16, imm16)
        {
            clocks += 8;
#ifndef NDEBUG
            std::clog << "\timulw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t arg3 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul16(arg1, arg2, arg3);
            break;
        }
        case 396:     // imul(reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\timull       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul32(arg1);
            break;
        }
        case 397:     // imul(mem32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\timull       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul32(arg1);
            break;
        }
        case 398:     // imul(reg32, reg32)
        {
            clocks += 6;
#ifndef NDEBUG
            std::clog << "\timull       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul32(arg1, arg2);
            break;
        }
        case 399:     // imul(mem32, reg32)
        {
            clocks += 6;
#ifndef NDEBUG
            std::clog << "\timull       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul32(arg1, arg2);
            break;
        }
        case 400:     // imul(reg32, reg32, imm32)
        {
            clocks += 8;
#ifndef NDEBUG
            std::clog << "\timull       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg3 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul32(arg1, arg2, arg3);
            break;
        }
        case 401:     // imul(mem32, reg32, imm32)
        {
            clocks += 8;
#ifndef NDEBUG
            std::clog << "\timull       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t arg3 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _imul32(arg1, arg2, arg3);
            break;
        }
        case 402:     // div(reg8)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tdivb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _div8(arg1);
            break;
        }
        case 403:     // div(mem8)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tdivb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _div8(arg1);
            break;
        }
        case 404:     // div(reg16)
        {
            clocks += 30;
#ifndef NDEBUG
            std::clog << "\tdivw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _div16(arg1);
            break;
        }
        case 405:     // div(mem16)
        {
            clocks += 30;
#ifndef NDEBUG
            std::clog << "\tdivw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _div16(arg1);
            break;
        }
        case 406:     // div(reg32)
        {
            clocks += 40;
#ifndef NDEBUG
            std::clog << "\tdivl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _div32(arg1);
            break;
        }
        case 407:     // div(mem32)
        {
            clocks += 40;
#ifndef NDEBUG
            std::clog << "\tdivl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _div32(arg1);
            break;
        }
        case 408:     // idiv(reg8)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tidivb       ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _idiv8(arg1);
            break;
        }
        case 409:     // idiv(mem8)
        {
            clocks += 25;
#ifndef NDEBUG
            std::clog << "\tidivb       ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _idiv8(arg1);
            break;
        }
        case 410:     // idiv(reg16)
        {
            clocks += 30;
#ifndef NDEBUG
            std::clog << "\tidivw       ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _idiv16(arg1);
            break;
        }
        case 411:     // idiv(mem16)
        {
            clocks += 30;
#ifndef NDEBUG
            std::clog << "\tidivw       ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _idiv16(arg1);
            break;
        }
        case 412:     // idiv(reg32)
        {
            clocks += 40;
#ifndef NDEBUG
            std::clog << "\tidivl       ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _idiv32(arg1);
            break;
        }
        case 413:     // idiv(mem32)
        {
            clocks += 40;
#ifndef NDEBUG
            std::clog << "\tidivl       ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _idiv32(arg1);
            break;
        }
        case 414:     // cbtw()
        {
            clocks += 3;
#ifndef NDEBUG
            std::clog << "\tcbtwb       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cbtw8();
            break;
        }
        case 415:     // cwtl()
        {
            clocks += 3;
#ifndef NDEBUG
            std::clog << "\tcwtlw       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cwtl16();
            break;
        }
        case 416:     // cwtd()
        {
            clocks += 3;
#ifndef NDEBUG
            std::clog << "\tcwtdw       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cwtd16();
            break;
        }
        case 417:     // cltd()
        {
            clocks += 3;
#ifndef NDEBUG
            std::clog << "\tcltdl       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _cltd32();
            break;
        }
        case 418:     // rep_movs()
        {
            clocks += 10;
#ifndef NDEBUG
            std::clog << "\trep movsb   ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _rep_movs8();
            break;
        }
        case 419:     // rep_movs()
        {
            clocks += 10;
#ifndef NDEBUG
            std::clog << "\trep movsw   ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _rep_movs16();
            break;
        }
        case 420:     // rep_movs()
        {
            clocks += 10;
#ifndef NDEBUG
            std::clog << "\trep movsl   ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _rep_movs32();
            break;
        }
        case 421:     // movs()
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tmovsb       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movs8();
            break;
        }
        case 422:     // movs()
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tmovsw       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movs16();
            break;
        }
        case 423:     // movs()
        {
            clocks += 2;
#ifndef NDEBUG
            std::clog << "\tmovsl       ";
#endif
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _movs32();
            break;
        }
        case 424:     // sal(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1, arg2);
            break;
        }
        case 425:     // sal(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1, arg2);
            break;
        }
        case 426:     // sal(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1, arg2);
            break;
        }
        case 427:     // sal(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1, arg2);
            break;
        }
        case 428:     // sal(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1, arg2);
            break;
        }
        case 429:     // sal(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1, arg2);
            break;
        }
        case 430:     // sal(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1);
            break;
        }
        case 431:     // sal(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal8(arg1);
            break;
        }
        case 432:     // sal(imm8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1, arg2);
            break;
        }
        case 433:     // sal(reg8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1, arg2);
            break;
        }
        case 434:     // sal(mem8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1, arg2);
            break;
        }
        case 435:     // sal(imm8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1, arg2);
            break;
        }
        case 436:     // sal(reg8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1, arg2);
            break;
        }
        case 437:     // sal(mem8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1, arg2);
            break;
        }
        case 438:     // sal(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1);
            break;
        }
        case 439:     // sal(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsalw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal16(arg1);
            break;
        }
        case 440:     // sal(imm8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1, arg2);
            break;
        }
        case 441:     // sal(reg8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1, arg2);
            break;
        }
        case 442:     // sal(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1, arg2);
            break;
        }
        case 443:     // sal(imm8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1, arg2);
            break;
        }
        case 444:     // sal(reg8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1, arg2);
            break;
        }
        case 445:     // sal(mem8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1, arg2);
            break;
        }
        case 446:     // sal(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1);
            break;
        }
        case 447:     // sal(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsall        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sal32(arg1);
            break;
        }
        case 448:     // sar(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1, arg2);
            break;
        }
        case 449:     // sar(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1, arg2);
            break;
        }
        case 450:     // sar(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1, arg2);
            break;
        }
        case 451:     // sar(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1, arg2);
            break;
        }
        case 452:     // sar(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1, arg2);
            break;
        }
        case 453:     // sar(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1, arg2);
            break;
        }
        case 454:     // sar(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1);
            break;
        }
        case 455:     // sar(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar8(arg1);
            break;
        }
        case 456:     // sar(imm8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1, arg2);
            break;
        }
        case 457:     // sar(reg8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1, arg2);
            break;
        }
        case 458:     // sar(mem8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1, arg2);
            break;
        }
        case 459:     // sar(imm8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1, arg2);
            break;
        }
        case 460:     // sar(reg8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1, arg2);
            break;
        }
        case 461:     // sar(mem8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1, arg2);
            break;
        }
        case 462:     // sar(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1);
            break;
        }
        case 463:     // sar(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar16(arg1);
            break;
        }
        case 464:     // sar(imm8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1, arg2);
            break;
        }
        case 465:     // sar(reg8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1, arg2);
            break;
        }
        case 466:     // sar(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1, arg2);
            break;
        }
        case 467:     // sar(imm8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1, arg2);
            break;
        }
        case 468:     // sar(reg8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1, arg2);
            break;
        }
        case 469:     // sar(mem8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1, arg2);
            break;
        }
        case 470:     // sar(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1);
            break;
        }
        case 471:     // sar(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tsarl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _sar32(arg1);
            break;
        }
        case 472:     // shl(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1, arg2);
            break;
        }
        case 473:     // shl(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1, arg2);
            break;
        }
        case 474:     // shl(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1, arg2);
            break;
        }
        case 475:     // shl(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1, arg2);
            break;
        }
        case 476:     // shl(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1, arg2);
            break;
        }
        case 477:     // shl(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1, arg2);
            break;
        }
        case 478:     // shl(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1);
            break;
        }
        case 479:     // shl(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl8(arg1);
            break;
        }
        case 480:     // shl(imm8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1, arg2);
            break;
        }
        case 481:     // shl(reg8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1, arg2);
            break;
        }
        case 482:     // shl(mem8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1, arg2);
            break;
        }
        case 483:     // shl(imm8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1, arg2);
            break;
        }
        case 484:     // shl(reg8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1, arg2);
            break;
        }
        case 485:     // shl(mem8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1, arg2);
            break;
        }
        case 486:     // shl(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1);
            break;
        }
        case 487:     // shl(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshlw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl16(arg1);
            break;
        }
        case 488:     // shl(imm8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1, arg2);
            break;
        }
        case 489:     // shl(reg8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1, arg2);
            break;
        }
        case 490:     // shl(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1, arg2);
            break;
        }
        case 491:     // shl(imm8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1, arg2);
            break;
        }
        case 492:     // shl(reg8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1, arg2);
            break;
        }
        case 493:     // shl(mem8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1, arg2);
            break;
        }
        case 494:     // shl(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1);
            break;
        }
        case 495:     // shl(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshll        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shl32(arg1);
            break;
        }
        case 496:     // shr(imm8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1, arg2);
            break;
        }
        case 497:     // shr(reg8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1, arg2);
            break;
        }
        case 498:     // shr(mem8, reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1, arg2);
            break;
        }
        case 499:     // shr(imm8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1, arg2);
            break;
        }
        case 500:     // shr(reg8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1, arg2);
            break;
        }
        case 501:     // shr(mem8, mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint8_t& arg2 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1, arg2);
            break;
        }
        case 502:     // shr(reg8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1);
            break;
        }
        case 503:     // shr(mem8)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrb        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr8(arg1);
            break;
        }
        case 504:     // shr(imm8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1, arg2);
            break;
        }
        case 505:     // shr(reg8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1, arg2);
            break;
        }
        case 506:     // shr(mem8, reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1, arg2);
            break;
        }
        case 507:     // shr(imm8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1, arg2);
            break;
        }
        case 508:     // shr(reg8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1, arg2);
            break;
        }
        case 509:     // shr(mem8, mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1, arg2);
            break;
        }
        case 510:     // shr(reg16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1);
            break;
        }
        case 511:     // shr(mem16)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr16(arg1);
            break;
        }
        case 512:     // shr(imm8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1, arg2);
            break;
        }
        case 513:     // shr(reg8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1, arg2);
            break;
        }
        case 514:     // shr(mem8, reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1, arg2);
            break;
        }
        case 515:     // shr(imm8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint8_t arg1 = readImmediate<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1, arg2);
            break;
        }
        case 516:     // shr(reg8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint8_t& arg1 = readRegister<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1, arg2);
            break;
        }
        case 517:     // shr(mem8, mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint8_t& arg1 = readMemory<uint8_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1, arg2);
            break;
        }
        case 518:     // shr(reg32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1);
            break;
        }
        case 519:     // shr(mem32)
        {
            clocks += 1;
#ifndef NDEBUG
            std::clog << "\tshrl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _shr32(arg1);
            break;
        }
        case 520:     // bsf(imm16, reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsfw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsf16(arg1, arg2);
            break;
        }
        case 521:     // bsf(reg16, reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsfw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsf16(arg1, arg2);
            break;
        }
        case 522:     // bsf(mem16, reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsfw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsf16(arg1, arg2);
            break;
        }
        case 523:     // bsf(imm32, reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsfl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsf32(arg1, arg2);
            break;
        }
        case 524:     // bsf(reg32, reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsfl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsf32(arg1, arg2);
            break;
        }
        case 525:     // bsf(mem32, reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsfl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsf32(arg1, arg2);
            break;
        }
        case 526:     // bsr(imm16, reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsrw        ";
#endif
            uint16_t arg1 = readImmediate<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsr16(arg1, arg2);
            break;
        }
        case 527:     // bsr(reg16, reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsrw        ";
#endif
            uint16_t& arg1 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsr16(arg1, arg2);
            break;
        }
        case 528:     // bsr(mem16, reg16)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsrw        ";
#endif
            uint16_t& arg1 = readMemory<uint16_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint16_t& arg2 = readRegister<uint16_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsr16(arg1, arg2);
            break;
        }
        case 529:     // bsr(imm32, reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsrl        ";
#endif
            uint32_t arg1 = readImmediate<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsr32(arg1, arg2);
            break;
        }
        case 530:     // bsr(reg32, reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsrl        ";
#endif
            uint32_t& arg1 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsr32(arg1, arg2);
            break;
        }
        case 531:     // bsr(mem32, reg32)
        {
            clocks += 5;
#ifndef NDEBUG
            std::clog << "\tbsrl        ";
#endif
            uint32_t& arg1 = readMemory<uint32_t>();
#ifndef NDEBUG
            std::clog << ", ";
#endif
            uint32_t& arg2 = readRegister<uint32_t>();
#ifndef NDEBUG
            std::clog << "\n";
#endif
            _bsr32(arg1, arg2);
            break;
        }
        default:
            throw std::runtime_error("Invalid instruction code: " + std::to_string(opcode));
    }
}
