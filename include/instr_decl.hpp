// This file is generated by instructions.rb. Do not edit here.

    void _adc16(uint16_t arg1, uint16_t& arg2);
    void _adc32(uint32_t arg1, uint32_t& arg2);
    void _adc8(uint8_t arg1, uint8_t& arg2);
    void _add16(uint16_t arg1, uint16_t& arg2);
    void _add32(uint32_t arg1, uint32_t& arg2);
    void _add8(uint8_t arg1, uint8_t& arg2);
    void _and16(uint16_t arg1, uint16_t& arg2);
    void _and32(uint32_t arg1, uint32_t& arg2);
    void _and8(uint8_t arg1, uint8_t& arg2);
    void _bsf16(uint16_t arg1, uint16_t& arg2);
    void _bsf32(uint32_t arg1, uint32_t& arg2);
    void _bsr16(uint16_t arg1, uint16_t& arg2);
    void _bsr32(uint32_t arg1, uint32_t& arg2);
    void _call32(uint32_t arg1);
    void _cbtw8();
    void _cltd32();
    void _cmp16(uint16_t arg1, uint16_t arg2);
    void _cmp32(uint32_t arg1, uint32_t arg2);
    void _cmp8(uint8_t arg1, uint8_t arg2);
    void _cwtd16();
    void _cwtl16();
    void _dec16(uint16_t& arg1);
    void _dec32(uint32_t& arg1);
    void _dec8(uint8_t& arg1);
    void _div16(uint16_t& arg1);
    void _div32(uint32_t& arg1);
    void _div8(uint8_t& arg1);
    void _idiv16(uint16_t& arg1);
    void _idiv32(uint32_t& arg1);
    void _idiv8(uint8_t& arg1);
    void _imul16(uint16_t& arg1);
    void _imul16(uint16_t& arg1, uint16_t& arg2);
    void _imul16(uint16_t& arg1, uint16_t& arg2, uint16_t arg3);
    void _imul32(uint32_t& arg1);
    void _imul32(uint32_t& arg1, uint32_t& arg2);
    void _imul32(uint32_t& arg1, uint32_t& arg2, uint32_t arg3);
    void _imul8(uint8_t& arg1);
    void _imul8(uint8_t& arg1, uint8_t& arg2);
    void _imul8(uint8_t& arg1, uint8_t& arg2, uint8_t arg3);
    void _inc16(uint16_t& arg1);
    void _inc32(uint32_t& arg1);
    void _inc8(uint8_t& arg1);
    void _int32(uint32_t arg1);
    void _jcc32(bool cc, uint32_t arg1);
    void _jmp32(uint32_t arg1);
    void _lea16(uint16_t& arg1, uint32_t& arg2);
    void _lea32(uint32_t& arg1, uint32_t& arg2);
    void _lea8(uint8_t& arg1, uint32_t& arg2);
    void _leave32();
    void _mov16(uint16_t arg1, uint16_t& arg2);
    void _mov32(uint32_t arg1, uint32_t& arg2);
    void _mov8(uint8_t arg1, uint8_t& arg2);
    void _movs16();
    void _movs32();
    void _movs8();
    void _movsb16(uint8_t arg1, uint16_t& arg2);
    void _movsb32(uint8_t arg1, uint32_t& arg2);
    void _movsw32(uint16_t arg1, uint32_t& arg2);
    void _movzb16(uint8_t arg1, uint16_t& arg2);
    void _movzb32(uint8_t arg1, uint32_t& arg2);
    void _movzw32(uint16_t arg1, uint32_t& arg2);
    void _mul16(uint16_t& arg1);
    void _mul32(uint32_t& arg1);
    void _mul8(uint8_t& arg1);
    void _neg16(uint16_t& arg1);
    void _neg32(uint32_t& arg1);
    void _neg8(uint8_t& arg1);
    void _nop32();
    void _not16(uint16_t& arg1);
    void _not32(uint32_t& arg1);
    void _not8(uint8_t& arg1);
    void _or16(uint16_t arg1, uint16_t& arg2);
    void _or32(uint32_t arg1, uint32_t& arg2);
    void _or8(uint8_t arg1, uint8_t& arg2);
    void _pop16(uint16_t& arg1);
    void _pop32(uint32_t& arg1);
    void _pop8(uint8_t& arg1);
    void _push16(uint16_t arg1);
    void _push32(uint32_t arg1);
    void _push8(uint8_t arg1);
    void _rep_movs16();
    void _rep_movs32();
    void _rep_movs8();
    void _ret32();
    void _sal16(uint16_t& arg1);
    void _sal16(uint8_t arg1, uint16_t& arg2);
    void _sal32(uint32_t& arg1);
    void _sal32(uint8_t arg1, uint32_t& arg2);
    void _sal8(uint8_t arg1, uint8_t& arg2);
    void _sal8(uint8_t& arg1);
    void _sar16(uint16_t& arg1);
    void _sar16(uint8_t arg1, uint16_t& arg2);
    void _sar32(uint32_t& arg1);
    void _sar32(uint8_t arg1, uint32_t& arg2);
    void _sar8(uint8_t arg1, uint8_t& arg2);
    void _sar8(uint8_t& arg1);
    void _sbb16(uint16_t arg1, uint16_t& arg2);
    void _sbb32(uint32_t arg1, uint32_t& arg2);
    void _sbb8(uint8_t arg1, uint8_t& arg2);
    void _setcc8(bool cc, uint8_t& arg1);
    void _shl16(uint16_t& arg1);
    void _shl16(uint8_t arg1, uint16_t& arg2);
    void _shl32(uint32_t& arg1);
    void _shl32(uint8_t arg1, uint32_t& arg2);
    void _shl8(uint8_t arg1, uint8_t& arg2);
    void _shl8(uint8_t& arg1);
    void _shr16(uint16_t& arg1);
    void _shr16(uint8_t arg1, uint16_t& arg2);
    void _shr32(uint32_t& arg1);
    void _shr32(uint8_t arg1, uint32_t& arg2);
    void _shr8(uint8_t arg1, uint8_t& arg2);
    void _shr8(uint8_t& arg1);
    void _sub16(uint16_t arg1, uint16_t& arg2);
    void _sub32(uint32_t arg1, uint32_t& arg2);
    void _sub8(uint8_t arg1, uint8_t& arg2);
    void _test16(uint16_t arg1, uint16_t arg2);
    void _test32(uint32_t arg1, uint32_t arg2);
    void _test8(uint8_t arg1, uint8_t arg2);
    void _xor16(uint16_t arg1, uint16_t& arg2);
    void _xor32(uint32_t arg1, uint32_t& arg2);
    void _xor8(uint8_t arg1, uint8_t& arg2);

